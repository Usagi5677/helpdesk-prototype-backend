# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Category {
  """Identifies the date and time when the object was created."""
  createdAt: Date!
  id: Int!
  name: String!

  """Identifies the date and time when the object was last updated."""
  updatedAt: Date!
}

type CategoryEdge {
  cursor: String
  node: Category
}

type CategoryPageInfo {
  count: Int!
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

"""Date custom scalar type"""
scalar Date

type Mutation {
  addAppUser(roles: [Role!]!, userId: String!): String!
  addChecklistItem(description: String!, ticketId: Int!): String!
  addComment(body: String!, isPublic: Boolean, ticketId: Int!): String!
  addFollower(newFollowerId: Int!, ticketId: Int!): String!
  addToUserGroup(userGroupId: Int!, userId: String!): String!
  assignAgent(agentId: Int!, ticketId: Int!): String!
  changeCategoryName(id: Int!, name: String!): String!
  completeChecklistItem(id: Int!): String!
  createCategory(name: String!): String!
  createTicket(body: String!, title: String!): String!
  createUserGroup(mode: String!, name: String!): String!
  deleteCategory(id: Int!): String!
  deleteChecklistItem(id: Int!): String!
  deleteUserGroup(id: Int!): String!
  editChecklistItem(description: String!, id: Int!): String!
  editUserGroup(id: Int!, mode: String!, name: String!): String!
  flushRedis: String!
  giveFeedback(feedback: String!, rating: Int!, ticketId: Int!): String!
  readAllNotifications: Boolean!
  readNotification(notificationId: Int!): Boolean!
  removeFollower(deletingFollowerId: Int!, ticketId: Int!): String!
  removeFromUserGroup(userGroupId: Int!, userId: Int!): String!
  removeUserRole(role: Role!, userId: Int!): String!
  setOwner(agentId: Int!, ticketId: Int!): String!
  setTicketPriority(id: Int!, priority: String!): String!
  setTicketStatus(id: Int!, status: String!): String!
  unassignAgent(agentId: Int!, ticketId: Int!): String!
  uncompleteChecklistItem(id: Int!): String!
}

type Notification {
  body: String!

  """Identifies the date and time when the object was created."""
  createdAt: Date!
  id: Int!
  readAt: Date

  """Identifies the date and time when the object was last updated."""
  updatedAt: Date!
  user: User!
}

type PaginatedCategory {
  edges: [CategoryEdge!]
  pageInfo: CategoryPageInfo
}

type PaginatedTickets {
  edges: [TicketEdge!]
  pageInfo: TicketPageInfo
}

type PaginatedUserGroup {
  edges: [UserGroupEdge!]
  pageInfo: UserGroupPageInfo
}

"""Ticket priorities."""
enum Priority {
  High
  Low
  Normal
}

type Profile {
  department: String!
  division: String!
  email: String
  fullName: String!
  post: String!
  rcno: Int!
  section: String
  telExtension: Int
  telMobile: Int
  telOffice: Int
  unit: String
  userId: String!
}

type Query {
  appUsers: [User!]!
  categories(
    """Paginate after opaque cursor"""
    after: String

    """Paginate before opaque cursor"""
    before: String

    """Paginate first"""
    first: Int

    """Paginate last"""
    last: Int
    name: String
  ): PaginatedCategory!
  hasTicketAccess(ticketId: Int!): Boolean!
  me: UserWithRoles!
  myTickets(
    """Paginate after opaque cursor"""
    after: String

    """Paginate before opaque cursor"""
    before: String
    categoryIds: [Int!]
    createdById: Int

    """Paginate first"""
    first: Int
    from: Date

    """Paginate last"""
    last: Int
    priority: Priority
    search: String
    self: Boolean
    status: Status
    to: Date
  ): PaginatedTickets!
  notifications: [Notification!]!
  profile: Profile!
  redisGet(key: String!): String
  redisKeys: [String!]!
  searchAPSUsers(query: String!): [User!]!
  searchUser(query: String!): [User!]!
  searchUsersAndGroups(query: String!): [SearchResult!]!
  ticket(ticketId: Int!): Boolean!
  ticketAttachments(ticketId: Int!): [TicketAttachment!]!
  tickets(
    """Paginate after opaque cursor"""
    after: String

    """Paginate before opaque cursor"""
    before: String
    categoryIds: [Int!]
    createdById: Int

    """Paginate first"""
    first: Int
    from: Date

    """Paginate last"""
    last: Int
    priority: Priority
    search: String
    self: Boolean
    status: Status
    to: Date
  ): PaginatedTickets!
  userGroup(id: Int!): UserGroup!
  userGroups(
    """Paginate after opaque cursor"""
    after: String

    """Paginate before opaque cursor"""
    before: String

    """Paginate first"""
    first: Int

    """Paginate last"""
    last: Int
    name: String
  ): PaginatedUserGroup!
}

"""All user roles."""
enum Role {
  Admin
  Agent
}

type SearchResult {
  name: String!
  type: String!
  user: User
  userGroup: UserGroup
}

"""Ticket statuses."""
enum Status {
  Closed
  Open
  Pending
  Reopened
  Solved
}

type Ticket {
  agents: [User!]!
  body: String
  categories: [Category!]!

  """Identifies the date and time when the object was created."""
  createdAt: Date!
  createdBy: User!
  feedback: String!
  followers: [User!]!
  id: Int!
  priority: Priority
  rating: Int!
  started: Boolean!
  status: Status!
  title: String!

  """Identifies the date and time when the object was last updated."""
  updatedAt: Date!
}

type TicketAttachment {
  """Identifies the date and time when the object was created."""
  createdAt: Date!
  description: String!
  id: Int!
  mimeType: String
  mode: String!
  originalName: String
  sharepointFileName: String

  """Identifies the date and time when the object was last updated."""
  updatedAt: Date!
  user: User!
}

type TicketEdge {
  cursor: String
  node: Ticket
}

type TicketPageInfo {
  count: Int!
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type User {
  """Identifies the date and time when the object was created."""
  createdAt: Date!
  email: String!
  fullName: String!
  id: Int!
  rcno: Int!
  roles: [Role!]

  """Identifies the date and time when the object was last updated."""
  updatedAt: Date!
  userId: String!
}

type UserGroup {
  """Identifies the date and time when the object was created."""
  createdAt: Date!
  createdBy: User
  id: Int!
  mode: String!
  name: String!

  """Identifies the date and time when the object was last updated."""
  updatedAt: Date!
  users: [User!]
}

type UserGroupEdge {
  cursor: String
  node: UserGroup
}

type UserGroupPageInfo {
  count: Int!
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type UserWithRoles {
  email: String!
  fullName: String!
  id: Int!
  rcno: Int!
  roles: [String!]!
  userId: String!
}
