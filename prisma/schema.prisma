datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  // previewFeatures = []
}

generator dbml {
  provider = "prisma-dbml-generator"
}

model User {
  id                   Int                  @id @default(autoincrement())
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt
  userId               String               @unique
  rcno                 Int
  fullName             String
  email                String
  notifications        Notification[]
  knowledgeBaseEntries KnowledgeBaseEntry[]
  roles                UserRole[]
  userGroupUsers       UserGroupUser[]
  ticketsCreated       Ticket[]
  ticketAssignments    TicketAssignment[]
  ticketFollowings     TicketFollowing[]
  checklistCompletions ChecklistItem[]
  ticketComments       TicketComment[]
  ticketAttachments    TicketAttachment[]
}

model Notification {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  userId    Int
  user      User      @relation(fields: [userId], references: [id])
  body      String?
  readAt    DateTime?
}

model KnowledgeBase {
  id      Int                  @id @default(autoincrement())
  mode    String
  name    String
  entries KnowledgeBaseEntry[]
}

model KnowledgeBaseEntry {
  id              Int           @id @default(autoincrement())
  createdAt       DateTime      @default(now())
  userId          Int
  user            User          @relation(fields: [userId], references: [id])
  knowledgeBaseId Int
  knowledgeBase   KnowledgeBase @relation(fields: [knowledgeBaseId], references: [id])
  body            String
  current         Boolean
}

enum Role {
  Agent
  Admin
}

model UserRole {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  role      Role
}

model UserGroup {
  id             Int             @id @default(autoincrement())
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  name           String          @unique
  mode           String          @default("Private")
  createdById    Int
  userGroupUsers UserGroupUser[]
}

model UserGroupUser {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      Int
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userGroupId Int
  userGroup   UserGroup @relation(fields: [userGroupId], references: [id], onDelete: Cascade)

  @@unique([userId, userGroupId])
}

model Ticket {
  id             Int                @id @default(autoincrement())
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  createdById    Int
  createdBy      User               @relation(fields: [createdById], references: [id])
  status         TicketStatus       @default(Pending)
  title          String
  body           String?
  rating         Int?
  feedback       String?
  priority       Priority?
  categories     TicketCategory[]
  assignments    TicketAssignment[]
  checklistItems ChecklistItem[]
  followings     TicketFollowing[]
  comments       TicketComment[]
  attachments    TicketAttachment[]
}

enum TicketStatus {
  Pending
  Open
  Closed
  Solved
  Reopened
}

enum Priority {
  High
  Normal
  Low
}

model Category {
  id        Int              @id @default(autoincrement())
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  name      String
  active    Boolean          @default(true)
  tickets   TicketCategory[]
}

model TicketCategory {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  ticketId   Int
  ticket     Ticket   @relation(fields: [ticketId], references: [id])
  categoryId Int
  category   Category @relation(fields: [categoryId], references: [id])
}

model TicketAssignment {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  ticketId  Int
  ticket    Ticket   @relation(fields: [ticketId], references: [id])
  isOwner   Boolean

  @@unique([userId, ticketId])
}

model ChecklistItem {
  id            Int       @id @default(autoincrement())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  ticketId      Int
  ticket        Ticket    @relation(fields: [ticketId], references: [id])
  description   String
  completedById Int?
  completedBy   User?     @relation(fields: [completedById], references: [id])
  completedAt   DateTime?
}

model TicketFollowing {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  ticketId  Int
  ticket    Ticket   @relation(fields: [ticketId], references: [id])

  @@unique([userId, ticketId])
}

model TicketComment {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  ticketId  Int
  ticket    Ticket   @relation(fields: [ticketId], references: [id])
  body      String
  mode      String   @default("Public")
}

model TicketAttachment {
  id                 Int      @id @default(autoincrement())
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  userId             Int
  user               User     @relation(fields: [userId], references: [id])
  ticketId           Int
  ticket             Ticket   @relation(fields: [ticketId], references: [id])
  description        String
  mimeType           String?
  originalName       String?
  sharepointFileName String?
  mode               String   @default("Public")
}
