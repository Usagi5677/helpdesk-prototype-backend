datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  // previewFeatures = []
}

generator dbml {
  provider = "prisma-dbml-generator"
}

model Site {
  id              Int                   @id @default(autoincrement())
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt
  name            String
  code            String                @unique
  mode            String                @default("Public")
  isEnabled       Boolean               @default(true)
  userRoles       UserRole[]
  userGroups      UserGroup[]
  tickets         Ticket[]
  categories      Category[]
  statusHistories TicketStatusHistory[]
  informations    Information[]
}

model User {
  id                   Int                @id @default(autoincrement())
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  userId               String             @unique
  rcno                 Int
  fullName             String
  email                String
  notifications        Notification[]
  informations         Information[]
  roles                UserRole[]
  userGroupUsers       UserGroupUser[]
  ticketsCreated       Ticket[]
  ticketAssignments    TicketAssignment[]
  ticketFollowings     TicketFollowing[]
  checklistCompletions ChecklistItem[]
  ticketComments       TicketComment[]
  ticketAttachments    TicketAttachment[]
  isSuperAdmin         Boolean            @default(false)
}

model Notification {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  userId    Int
  user      User      @relation(fields: [userId], references: [id])
  body      String?
  link      String?
  readAt    DateTime?
}

model Information {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById Int
  createdBy   User     @relation(fields: [createdById], references: [id])
  mode        String
  title       String
  body        String
  siteId      Int      @default(1)
  site        Site     @relation(fields: [siteId], references: [id], onDelete: Cascade)
}

enum Role {
  Agent
  Admin
  User
}

model UserRole {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  role      Role
  siteId    Int      @default(1)
  site      Site     @relation(fields: [siteId], references: [id], onDelete: Cascade)

  @@unique([userId, role, siteId])
}

model UserGroup {
  id             Int             @id @default(autoincrement())
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  name           String          @unique
  mode           String          @default("Private")
  createdById    Int
  userGroupUsers UserGroupUser[]
  siteId         Int             @default(1)
  site           Site            @relation(fields: [siteId], references: [id], onDelete: Cascade)
}

model UserGroupUser {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      Int
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userGroupId Int
  userGroup   UserGroup @relation(fields: [userGroupId], references: [id], onDelete: Cascade)

  @@unique([userId, userGroupId])
}

model Ticket {
  id                Int                @id @default(autoincrement())
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  createdById       Int
  createdBy         User               @relation(fields: [createdById], references: [id])
  siteId            Int                @default(1)
  site              Site               @relation(fields: [siteId], references: [id], onDelete: Cascade)
  status            TicketStatus       @default(Pending)
  statusChangedAt   DateTime?
  title             String
  body              String?
  rating            Int?
  feedback          String?
  priority          Priority?
  ticketCategories  TicketCategory[]
  ticketAssignments TicketAssignment[]
  checklistItems    ChecklistItem[]
  ticketFollowings  TicketFollowing[]
  comments          TicketComment[]
  attachments       TicketAttachment[]
}

enum TicketStatus {
  Pending
  Open
  Closed
  Solved
  Reopened
}

enum Priority {
  High
  Normal
  Low
}

model Category {
  id        Int              @id @default(autoincrement())
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  name      String
  active    Boolean          @default(true)
  tickets   TicketCategory[]
  siteId    Int              @default(1)
  site      Site             @relation(fields: [siteId], references: [id], onDelete: Cascade)
}

model TicketCategory {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  ticketId   Int
  ticket     Ticket   @relation(fields: [ticketId], references: [id])
  categoryId Int
  category   Category @relation(fields: [categoryId], references: [id])
}

model TicketAssignment {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  ticketId  Int
  ticket    Ticket   @relation(fields: [ticketId], references: [id])
  isOwner   Boolean

  @@unique([userId, ticketId])
}

model ChecklistItem {
  id            Int       @id @default(autoincrement())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  ticketId      Int
  ticket        Ticket    @relation(fields: [ticketId], references: [id])
  description   String
  completedById Int?
  completedBy   User?     @relation(fields: [completedById], references: [id])
  completedAt   DateTime?
}

model TicketFollowing {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  ticketId  Int
  ticket    Ticket   @relation(fields: [ticketId], references: [id])

  @@unique([userId, ticketId])
}

model TicketComment {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  ticketId  Int
  ticket    Ticket   @relation(fields: [ticketId], references: [id])
  body      String
  mode      String   @default("Public")
}

model TicketAttachment {
  id                 Int      @id @default(autoincrement())
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  userId             Int
  user               User     @relation(fields: [userId], references: [id])
  ticketId           Int
  ticket             Ticket   @relation(fields: [ticketId], references: [id])
  description        String
  mimeType           String?
  originalName       String?
  sharepointFileName String?
  mode               String   @default("Public")
}

model TicketStatusHistory {
  id        Int          @id @default(autoincrement())
  createdAt DateTime     @default(now())
  status    TicketStatus
  count     Int
  siteId    Int          @default(1)
  site      Site         @relation(fields: [siteId], references: [id], onDelete: Cascade)

  @@unique([createdAt, status, siteId])
}
